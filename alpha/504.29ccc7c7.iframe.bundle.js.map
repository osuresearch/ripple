{"version":3,"file":"504.29ccc7c7.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAkFA;;;;AC1DA","sources":["webpack://@osuresearch/ripple/./src/components/Conditional/ConditionInformation.tsx","webpack://@osuresearch/ripple/./src/components/Field/ValueFieldRenderer.tsx"],"sourcesContent":["import { Callout, IconButton, Stack, Group, Chip, Text, HashLink } from '@osuresearch/ui';\nimport React from 'react';\nimport regexifyString from 'regexify-string';\nimport { Condition, FieldReferenceSet, FieldDefinition, PageDefinition } from '../../types';\nimport styled from 'styled-components';\n\nexport type ConditionInformationProps = {\n  name: string;\n  condition?: Condition;\n  references: FieldReferenceSet;\n  passed: boolean;\n  children: React.ReactNode;\n};\n\nfunction FieldInfo({\n  name,\n  field,\n  page\n}: {\n  name: string;\n  field?: FieldDefinition;\n  page?: PageDefinition;\n}) {\n  // Bad reference\n  if (!field) {\n    return (\n      <Text c=\"error\" fw=\"bold\">\n        {name}\n        <Callout contentSlot={<Text p=\"sm\" fs=\"sm\">Field is missing from the form definition</Text>}>\n          <IconButton label=\"More information\" name=\"exclamationCircle\" c=\"error\" size={14} />\n        </Callout>\n      </Text>\n    );\n  }\n\n  return (\n    <Text fw=\"bold\" c=\"warning-contrast\">\n      {name}\n      <Callout\n        contentSlot={\n          <Stack p=\"sm\">\n            <Text fs=\"sm\">{field?.label}</Text>\n            <Group>\n              <Chip c=\"error\">required</Chip>\n              <Chip variant=\"indicator\" c=\"green\">page: {page?.title ?? 'Unknown'}</Chip>\n            </Group>\n          </Stack>\n        }\n      >\n        <IconButton c=\"warning-contrast\" label=\"More information\" name=\"questionCircle\" size={14} />\n      </Callout>\n    </Text>\n  );\n}\n\nconst Container = styled.div`\n  border: 2px dashed var(--rui-warning);\n  position: relative;\n\n  // Being able to fade it out would be nice. But there's\n  // a lot of quirks.\n\n  /* &::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n\n    opacity: 0.1;\n\n    background: repeating-linear-gradient(\n      -45deg,\n      rgba(0,0,0,0),\n      rgba(0,0,0,0) 10px,\n      var(--rui-warning) 10px,\n      var(--rui-warning) 20px\n    );\n  } */\n`;\n\nexport function ConditionInformation({\n  name,\n  condition = '',\n  references,\n  passed,\n  children\n}: ConditionInformationProps) {\n  let formatted: string | React.ReactNode = condition;\n\n  const fieldNames = Object.keys(references);\n  if (fieldNames.length > 0) {\n    const pattern = new RegExp(`(?<field>(${fieldNames.join('|').replaceAll('.', '\\\\.')}))`, 'g');\n\n    // Replace identified fields with DOM with additional information\n    formatted = regexifyString({\n      // Compile:\n      // ant or not bat and cat in (\"dog\", \"elf\") or fish and g.h.i == jaguar\n      // /(?<field>(ant|bat|cat|fish|g\\.h\\.i|jaguar))/g\n      pattern,\n      decorator: (match, index, result) => {\n        const [field, page] = references[match];\n        return <FieldInfo name={match} field={field} page={page} />;\n      },\n      input: condition\n    });\n  }\n\n  return (\n    <Container>\n      <Group justify=\"apart\">\n        <Text as=\"div\" bgc=\"warning-shade\" c=\"warning-contrast\" p=\"xs\" fs=\"sm\">\n          <Text fw=\"bold\" c=\"warning-contrast\">\n            Condition:{' '}\n          </Text>{' '}\n          {formatted}\n        </Text>\n        <Chip m=\"sm\" c={passed ? 'success' : 'error'}>\n          {passed ? 'Visible' : 'Hidden'}\n        </Chip>\n      </Group>\n      {children}\n    </Container>\n  );\n}\n","import React, { ComponentType, forwardRef } from 'react';\nimport { Chip } from '@osuresearch/ui';\nimport { useRippleContext } from '../../hooks/useRippleContext';\nimport { ValueFieldProps, BaseFieldProps } from '../../react';\nimport styled from 'styled-components';\nimport { Debug } from '../Debug';\nimport { useRippleSelector } from '../../hooks';\n\nexport type ValueFieldRendererProps<T> = BaseFieldProps<T> & {\n  as: ComponentType<ValueFieldProps<T>>;\n};\n\nconst DebugWrapper = styled.div`\n  position: absolute;\n  left: calc(100% + 16px);\n  white-space: nowrap;\n`\n// export function ValueFieldRenderer2<T> = forwardRef<HTMLElement, ValueFieldRendererProps<T>>((\n//   { as: Component, ...props },\n//   ref\n// ) => {\n\n// })\n\nexport function ValueFieldRenderer<T>({ as: Component, ...props }: ValueFieldRendererProps<T>) {\n  const {\n    formState: { errors }\n  } = useRippleContext();\n\n  const diffMode = useRippleSelector((state) => state.settings.diffMode);\n\n  return (\n    <div className=\"rui-relative\">\n      <Debug>\n        <DebugWrapper>\n          <Chip variant=\"indicator\" c=\"pink\">field: {props.name}</Chip>\n        </DebugWrapper>\n      </Debug>\n\n      <Component {...props} />\n    </div>\n  );\n}\n"],"names":[],"sourceRoot":""}