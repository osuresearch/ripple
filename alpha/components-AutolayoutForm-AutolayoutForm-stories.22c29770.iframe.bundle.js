"use strict";(self.webpackChunk_osuresearch_ripple=self.webpackChunk_osuresearch_ripple||[]).push([[786],{"./src/components/AutolayoutForm/AutolayoutForm.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Example:()=>Example,__namedExportsOrder:()=>__namedExportsOrder,default:()=>AutolayoutForm_stories});__webpack_require__("./node_modules/react/index.js");var Form=__webpack_require__("./src/components/Form/index.ts"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");function AutolayoutForm(props){return(0,jsx_runtime.jsx)(Form.l,{...props})}AutolayoutForm.displayName="AutolayoutForm";try{AutolayoutForm.displayName="AutolayoutForm",AutolayoutForm.__docgenInfo={description:"An autolayout form handles automatic rendering of the table of contents,\npages, and form questions according to the provided `FormDefinition`.\n\nPages are laid out in the order defined in `FormDefinition.pages`\nand fields are laid out in the order defined in `FieldDefinition.fields`.",displayName:"AutolayoutForm",props:{form:{defaultValue:null,description:"",name:"form",required:!0,type:{name:"FormDefinition"}},options:{defaultValue:null,description:"",name:"options",required:!1,type:{name:"Partial<RippleOptions>"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/AutolayoutForm/AutolayoutForm.tsx#AutolayoutForm"]={docgenInfo:AutolayoutForm.__docgenInfo,name:"AutolayoutForm",path:"src/components/AutolayoutForm/AutolayoutForm.tsx#AutolayoutForm"})}catch(__react_docgen_typescript_loader_error){}var tests=__webpack_require__("./src/mocks/tests.ts");const AutolayoutForm_stories={title:"Components/AutolayoutForm",component:AutolayoutForm,argTypes:{}},Example={render:args=>(0,jsx_runtime.jsx)(AutolayoutForm,{...args,form:tests.N}),args:{}};Example.parameters={...Example.parameters,docs:{...Example.parameters?.docs,source:{originalSource:"{\n  render: args => <AutolayoutForm {...args} form={TestForm} />,\n  args: {}\n}",...Example.parameters?.docs?.source}}};const __namedExportsOrder=["Example"]},"./src/components/Form/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{l:()=>_Form__WEBPACK_IMPORTED_MODULE_0__.l});var _Form__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/components/Form/Form.tsx")},"./src/mocks/tests.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{N:()=>TestForm});const SimpleCollectionTemplate={title:"Simple collection item",fields:{field1:{type:"Text",label:"First field on collection item",component:{props:{height:1}}},field2:{type:"Text",label:"Second field on collection item",component:{props:{height:1}}},field3:{type:"Boolean",label:"Third field on collection item"},field4:{condition:"this.field3",type:"Text",label:"Fourth field on collection item"}}},ShortTextField={label:"",type:"Text",component:{props:{height:1,layout:"horizontal"}}},LongCollectionTemplate={title:"Long form data",fields:{datasetTitle:{type:"Text",label:"Dataset title",component:{props:{limit:50,height:1}}},datasetSize:{type:"Number",label:"Size of the dataset",component:{props:{formatOptions:{style:"unit",unit:"megabyte"}}}},datasetRecords:{type:"Number",label:"Number of records"},datasetTags:{type:"Text",label:"Additional tags"},_contact:{type:"Section",label:"Contact information"},contactName:{...ShortTextField,label:"Contact name"},contactAddress1:{...ShortTextField,label:"Address 1"},contactAddress2:{...ShortTextField,label:"Address 2"},contactCity:{...ShortTextField,label:"City"},contactState:{...ShortTextField,label:"State"},contactZip:{...ShortTextField,label:"Zip"}}},ExampleChoices={first:"First choice",second:"Second choice **with ~~formatting~~**",third:"\n    Third choice with **formatting** and additional markdown:\n    - like\n    - these\n    - lists\n\n    Or [a link](https://github.com/osuresearch).\n  ",fourth:"Fourth choice"},TestForm={title:"Test form",version:"1.0",pages:{Page1:{title:"Page 1",fields:{p1Field1:{type:"Text",label:"This is the first field you will ever see",description:"Ain't it great?"}}},Page2:{title:"Page 2",fields:{showConditionalPage1:{type:"Boolean",label:"Say yes to see the conditional page"}}},ConditionalPage1:{title:"Conditionally displayed page",condition:"showConditionalPage1",description:"This page was displayed because you said yes on the previous page",fields:{cp1Field1:{type:"Text",label:"First field on conditional page 1"}}},CollectionPage:{title:"Collection fields",fields:{defaultCollection:{type:"Collection",label:"Default collection",description:"\n        The default configuration of collections will render responses\n        inline on the page in a horizontal flex layout. Useful for\n        short response forms.\n      ",template:SimpleCollectionTemplate},disclosureCollection:{type:"Collection",label:"Disclosure collection",description:"\n        `DisclosureCollection` should be used for longer response forms. Each\n        form is contained within a collapsible disclosure component.\n\n        The `summary` config is used as the title for each instance. Note that tags\n        are stripped from responses prior to being sent to the summary markdown parser.\n      ",summary:res=>`\n        ${res.datasetTitle??"-"}\n        ${res.datasetRecords?"("+res.datasetRecords+" records)":""}\n      `,template:LongCollectionTemplate,component:{name:"DisclosureCollection"}},_experiments:{type:"Section",label:"Experimental variants"},tabularCollection:{type:"Collection",label:"Tabular collection",description:"\n        `TableCollection` renders a row per item and headers render\n        the render the template field labels.\n\n        Component props can be used to customize the per-column behaviour.\n      ",template:{title:"Tabular data",fields:{datasetTitle:{type:"Text",label:"Dataset title",component:{props:{height:1}}},datasetSize:{type:"Number",label:"Size of the dataset",component:{props:{formatOptions:{style:"unit",unit:"megabyte"}}}},datasetRecords:{type:"Number",label:"Number of records"},datasetTags:{type:"Text",label:"Additional tags",component:{props:{height:1}}}}},component:{name:"TableCollection",props:{widths:["40%","20%","20%","20%"]}}},summarizedCollection:{type:"Collection",label:"Summarized collection",description:"\n        The `SummarizedCollection` component will render a markdown\n        summary per instance. Editing instances will take the user to a\n        subpage.\n\n        Important: If you do not summarize all the fields, then information\n        may be missing that requires access to the subpage. This may impact\n        diffing, printing, etc ... depending on how far we get on features.\n      ",template:LongCollectionTemplate,summary:res=>`\n        **Dataset:** ${res.datasetTitle??"Unnamed"}\n\n        |Size (MB)|# of Records|Tags\n        |---|---|---\n        |${res.datasetSize??"—"}|${res.datasetRecords??"—"}|${res.datasetTags??"—"}\n\n        **Contact:** ${res.contactName??"*No contact*"}\n\n        **Address**\n\n        ${res.contactAddress1??"*No address*"}\n        ${res.contactAddress2??""}\n        ${res.contactCity??""} ${res.contactState??""} ${res.contactZip??""}\n      `,component:{name:"SummarizedCollection"}}}},TextEntryKitchenSink:{title:"Text entry fields",description:"\n    Text entry is the core of forms and where\n    Ripple's more advanced markup features come into play.\n  ",fields:{defaultTextField:{type:"Text",label:"\n        Out of the box, the `Text` field supports our\n        full suite of markup with no limitation on how\n        much content may be added by the user.\n      "},limitedTextField:{type:"Text",label:"\n        The `limit` prop can be used to set a maximum number\n        of characters for a particular field.\n\n        Character count is based on **visible** characters,\n        and does not account for newlines or markup. Thus\n        the amount of bytes saved for this field will\n        potentially exceed this limit.\n      ",component:{props:{limit:500}}},shortTextField:{type:"Text",label:"\n        Setting the `height` prop will allow you to\n        create single line styled inputs. However, this\n        is just a **suggestion** for formatting. Text\n        will still wrap on the page and users may still enter\n        newlines or other markdown like other text fields.\n\n        This adheres to the Ripple philosophy of treating forms\n        as if they were Word documents: all user generated content\n        should be visible and scannable regardless of view mode.\n      ",component:{props:{limit:50,height:1}}},longTextField:{type:"Text",label:"\n        If you expect your users to write an essay\n        for a particular question, make it big.\n      ",component:{props:{height:50}}}}},ChoicesKitchenSink:{title:"Simple choice fields",fields:{booleanField:{type:"Boolean",label:"Example `Boolean` field"},flagField:{type:"Flag",label:"Example `Flag` field",choices:ExampleChoices},flagArrayField:{type:"FlagArray",label:"Example `FlagArray` field",choices:ExampleChoices},keyField:{type:"Key",label:"Example `Key` field",choices:ExampleChoices},keyArrayField:{type:"KeyArray",label:"Example `KeyArray` field",choices:ExampleChoices}}},DataEntryKitchenSink:{title:"Misc data entry fields",fields:{dateField:{type:"Date",label:"Example `Date` field"},numberField:{type:"Number",label:"Example `Number` field"},numberRangeField:{type:"NumberRange",label:"Example `NumberRange` field"},moneyField:{type:"Number",label:"\n        Use the `Number` field with currency formatting for monetary input.\n      ",description:"\n        See [Research UI 5's example of currency formatting](https://osuresearch.github.io/ui/docs/?path=/docs/forms-numberfield--overview#currency)\n        for more information on configurability.\n      ",component:{props:{formatOptions:{currency:"USD",currencySign:"accounting",style:"currency"}}}},attachmentField:{type:"Attachment",label:"Example `Attachment` field"},signatureField:{type:"Signature",label:"Example `Signature` field"}}},CommonPatterns:{title:"Common design patterns",description:"\n    Examples of common design patterns for fields and questions\n    that we've observed during development of complex forms.\n  ",fields:{textEntry:{type:"Text",label:"Foo bar"},textEntryNotApplicable:{type:"Flag",label:"Not applicable"}}}}}}}]);