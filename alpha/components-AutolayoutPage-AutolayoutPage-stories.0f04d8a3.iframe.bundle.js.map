{"version":3,"file":"components-AutolayoutPage-AutolayoutPage-stories.0f04d8a3.iframe.bundle.js","mappings":";;;;AAmEA","sources":["webpack://@osuresearch/ripple/./src/components/Page/Page.tsx"],"sourcesContent":["import {\n  Alert,\n  Chip,\n  Stack\n} from '@osuresearch/ui';\n\nimport React from 'react';\nimport { Route, Routes } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport { useRippleContext } from '../../hooks/useRippleContext';\nimport { Conditional } from '../Conditional';\nimport { ErrorBoundary } from '../ErrorBoundary';\nimport { PageContext, usePageContext } from '../../hooks/usePageContext';\nimport { InstancePage } from '../InstancePage';\nimport { Debug } from '../Debug';\nimport { PageName } from '../../types';\nimport { PageHeader } from '../PageHeader';\nimport { Field } from '../Field';\nimport { Pagination } from '../Pagination';\n\nexport type PageProps = {\n  name: PageName;\n\n  withHeader?: boolean;\n\n  children?: React.ReactNode;\n};\n\nfunction Content({ name, withHeader, children }: PageProps) {\n  const { layoutMode } = useRippleContext();\n  const { page } = usePageContext();\n\n  // TODO: Impl. Also requires handling bubbling up subpage errors.\n  // const errors = { foo: { message: 'bar'} };\n  const errors = {};\n\n  return (\n    <>\n      {withHeader &&\n        <PageHeader name={name} page={page} errors={errors} />\n      }\n\n      {children}\n\n      {layoutMode === 'Paged' && <Pagination current={name} />}\n    </>\n  )\n}\n\nconst DebugWrapper = styled.div`\n  position: absolute;\n  left: calc(100% - 30px);\n  white-space: nowrap;\n`\n\n/**\n * A page provides context for all child fields and handles\n * automatic layout rendering if `autolayout` is specified.\n *\n * Pages control routing for nested collection fields that\n * are displayed as sub-pages.\n *\n * Includes route paths:\n * - `/`: The current page\n * - `:fieldName/*`: A collection instance sub-page\n */\nexport function Page(props: PageProps) {\n  const { form } = useRippleContext();\n  const { name } = props;\n\n  const page = form.pages[name];\n  if (!page) {\n    return (\n      <Alert variant=\"error\" title=\"Page not found\">\n        Page missing from form definition: {name}\n      </Alert>\n    );\n  }\n\n  return (\n    <PageContext.Provider value={{ name, page }}>\n      <Conditional name={name} condition={page.condition}>\n        <Debug>\n          <DebugWrapper>\n            <Chip variant=\"indicator\" c=\"green\">page.name: {name}</Chip>\n          </DebugWrapper>\n        </Debug>\n\n        <Content {...props} />\n        {/* Disabled for now - issue with accessing this router state from outside the package.  */}\n\n        {/* Routing to either subpages (for collection instances) or content for *this* page */}\n        {/* <Routes>\n          <Route path=\"/\"\n            element={<Content {...props} />}\n            errorElement={<ErrorBoundary />}\n          />\n          <Route path=\":fieldName/*\"\n            element={<InstancePage breadcrumbs={[{ label: page.title, href: `/page/${name}` }]} {...props} name=\"\" />}\n            errorElement={<ErrorBoundary />}\n          />\n        </Routes> */}\n      </Conditional>\n    </PageContext.Provider>\n  );\n}\n"],"names":[],"sourceRoot":""}