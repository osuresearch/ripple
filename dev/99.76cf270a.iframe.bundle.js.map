{"version":3,"file":"99.76cf270a.iframe.bundle.js","mappings":";;;;;;;AAkBA;;AAMA;AAQA;;;;ACkCA","sources":["webpack://@osuresearch/ripple/./src/components/TableOfContents/TableOfContents.tsx","webpack://@osuresearch/ripple/./src/components/Page/Page.tsx"],"sourcesContent":["import { Box, FocusRing, Stack, Divider, Link, Text, IconButton, ScrollArea, Icon, Group, Tooltip } from '@osuresearch/ui';\nimport { isActive } from '@tiptap/core';\nimport React, { CSSProperties, useState } from 'react';\nimport { NavLink, useLocation } from 'react-router-dom';\nimport styled from 'styled-components'\nimport { toggleNavigation } from '../../features/settings';\nimport { useCondition, useRippleContext } from '../../hooks';\nimport { Conditional } from '../Conditional';\nimport { Debugger } from '../Debugger';\nimport { PageName } from '../../types';\n\nconst StyledNavLink = styled.div<{ isActive: boolean, isHidden: boolean }>`\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n  padding-left: 4px;\n  margin-left: -4px;\n\n  color: ${\n    (props) => props.isHidden ? 'var(--rui-dark)'\n      : (props.isActive ? 'var(--rui-primary)'\n      : 'var(--rui-light-contrast)')\n  };\n\n  box-shadow: ${(props) => props.isActive ? '-4px 0px 0px 0px var(--rui-primary)' : 'none'};\n`\n\ntype PageNavLinkProps = {\n  name: PageName;\n  children?: React.ReactNode;\n};\n\nfunction PageNavLink({ name, children }: PageNavLinkProps) {\n  const { form, selector } = useRippleContext();\n  const definition = form.pages[name];\n\n  const showConditions = selector((state) => state.settings.showConditions);\n\n  const { passed, error, fields, references } = useCondition(definition.condition);\n\n  if (!definition) {\n    return (\n      <Box bgc=\"error\" c=\"error-contrast\" p=\"xs\">\n        Missing page &apos;{name}&apos;\n      </Box>\n    );\n  }\n\n  if (!showConditions && !passed) {\n    return null;\n  }\n\n  return (\n    <FocusRing>\n      <Group w={300} justify=\"apart\" px=\"xs\">\n        <NavLink to={'#/' + name} style={{ maxWidth: 250 }}>\n          {({ isActive }) => <StyledNavLink isActive={window.location.hash === '#/' + name} isHidden={!passed}>\n            {definition.title} {children}\n          </StyledNavLink>}\n        </NavLink>\n\n        {showConditions && definition.condition &&\n        <Tooltip contentSlot=\"This page is conditionally displayed\" delay={0} placement=\"left\">\n          <NavLink to={'#/' + name}>\n            <Icon size={20} name={passed ? 'eye' : 'eyeSlash'} c=\"error\" aria-label=\"Conditional\" />\n          </NavLink>\n        </Tooltip>\n        }\n\n        {/* TODO: Error indicator  */}\n        {/* {!showConditions &&\n          <Icon name=\"exclamationFill\" c=\"error\" aria-label=\"Errors\" />\n        } */}\n      </Group>\n    </FocusRing>\n  );\n}\n\nexport function TableOfContents() {\n  const { selector, dispatch, form } = useRippleContext();\n\n  const showNavigation = selector((state) => state.settings.showNavigation);\n  const layoutMode = selector((state) => state.settings.layoutMode);\n  const dispatcher = dispatch();\n\n  // Link behaviour changes based on layout mode.\n  // If we're on a single page, each link will jump to\n  // the heading of the appropriate section.\n\n  // Paged navigation uses React Router to change the current page.\n  if (layoutMode === 'Paged') {\n    return (\n      <Stack p=\"md\">\n        <IconButton\n          name=\"bars\"\n          size={24}\n          label=\"Toggle navigation\"\n          onPress={() => dispatcher(toggleNavigation(!showNavigation))}\n        />\n\n        {showNavigation &&\n        <ScrollArea h=\"100px\" type=\"hover\" style={{ flexGrow: 1 }} hideDelay={1000}>\n          <Stack gap=\"xs\">\n            <Text c=\"dark\" fw=\"bold\" fs=\"sm\">Outline</Text>\n            {Object.keys(form.pages).map((name) => (\n              <PageNavLink key={name} name={name} />\n            ))}\n          </Stack>\n        </ScrollArea>\n        }\n      </Stack>\n    );\n  }\n\n  // Single page navigation will scroll the document to the\n  // target page heading.\n  if (layoutMode === 'Single') {\n    return (\n      <Stack miw={500}>\n        TODO: Single page navigation links.\n        {Object.keys(form.pages).map((name) => (\n          <Link key={name} href={'#ripple-page-' + name}>\n            {form.pages[name].title}\n          </Link>\n        ))}\n      </Stack>\n    );\n  }\n\n  throw new Error('Unhandled layout mode: ' + layoutMode);\n}\n","import {\n  Alert,\n  Chip,\n  Stack\n} from '@osuresearch/ui';\n\nimport React from 'react';\nimport { Route, Routes } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport { useRippleContext } from '../../hooks/useRippleContext';\nimport { Conditional } from '../Conditional';\nimport { ErrorBoundary } from '../ErrorBoundary';\nimport { PageContext, usePageContext } from '../../hooks/usePageContext';\nimport { InstancePage } from '../InstancePage';\nimport { Debug } from '../Debug';\nimport { PageName } from '../../types';\nimport { PageHeader } from '../PageHeader';\nimport { Field } from '../Field';\nimport { Pagination } from '../Pagination';\n\nexport type PageProps = {\n  name: PageName;\n\n  withHeader?: boolean;\n\n  children?: React.ReactNode;\n};\n\nfunction Content({ name, withHeader, children }: PageProps) {\n  const { page } = usePageContext();\n\n  // TODO: Impl. Also requires handling bubbling up subpage errors.\n  // const errors = { foo: { message: 'bar'} };\n  const errors = {};\n\n  return (\n    <>\n      {withHeader &&\n        <PageHeader name={name} page={page} errors={errors} />\n      }\n\n      {children}\n\n      <Pagination current={name} />\n    </>\n  )\n}\n\nconst DebugWrapper = styled.div`\n  position: absolute;\n  left: calc(100% - 30px);\n  white-space: nowrap;\n`\n\n/**\n * A page provides context for all child fields and handles\n * automatic layout rendering if `autolayout` is specified.\n *\n * Pages control routing for nested collection fields that\n * are displayed as sub-pages.\n *\n * Includes route paths:\n * - `/`: The current page\n * - `:fieldName/*`: A collection instance sub-page\n */\nexport function Page(props: PageProps) {\n  const { form } = useRippleContext();\n  const { name } = props;\n\n  const page = form.pages[name];\n  if (!page) {\n    return (\n      <Alert variant=\"error\" title=\"Page not found\">\n        Page missing from form definition: {name}\n      </Alert>\n    );\n  }\n\n  return (\n    <PageContext.Provider value={{ name, page }}>\n      <Conditional name={name} condition={page.condition}>\n        <Debug>\n          <DebugWrapper>\n            <Chip variant=\"indicator\" c=\"green\">page.name: {name}</Chip>\n          </DebugWrapper>\n        </Debug>\n\n        <Content {...props} />\n        {/* Disabled for now - issue with accessing this router state from outside the package.  */}\n\n        {/* Routing to either subpages (for collection instances) or content for *this* page */}\n        {/* <Routes>\n          <Route path=\"/\"\n            element={<Content {...props} />}\n            errorElement={<ErrorBoundary />}\n          />\n          <Route path=\":fieldName/*\"\n            element={<InstancePage breadcrumbs={[{ label: page.title, href: `/page/${name}` }]} {...props} name=\"\" />}\n            errorElement={<ErrorBoundary />}\n          />\n        </Routes> */}\n      </Conditional>\n    </PageContext.Provider>\n  );\n}\n"],"names":[],"sourceRoot":""}